<?php

namespace ContainerQV97orU;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPayPalPaymentMethodListenerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Sylius\PayPalPlugin\Listener\PayPalPaymentMethodListener' shared service.
     *
     * @return \Sylius\PayPalPlugin\Listener\PayPalPaymentMethodListener
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/sylius/paypal-plugin/src/Listener/PayPalPaymentMethodListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/sylius/paypal-plugin/src/Onboarding/Initiator/OnboardingInitiatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/sylius/paypal-plugin/src/Onboarding/Initiator/OnboardingInitiator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Security.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security.php';

        $a = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->privates['Sylius\\PayPalPlugin\\Listener\\PayPalPaymentMethodListener'])) {
            return $container->privates['Sylius\\PayPalPlugin\\Listener\\PayPalPaymentMethodListener'];
        }

        return $container->privates['Sylius\\PayPalPlugin\\Listener\\PayPalPaymentMethodListener'] = new \Sylius\PayPalPlugin\Listener\PayPalPaymentMethodListener(new \Sylius\PayPalPlugin\Onboarding\Initiator\OnboardingInitiator($a, new \Symfony\Bundle\SecurityBundle\Security(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'security.authenticator.managers_locator' => ['privates', 'security.authenticator.managers_locator', 'getSecurity_Authenticator_ManagersLocatorService', true],
            'security.authorization_checker' => ['services', 'security.authorization_checker', 'getSecurity_AuthorizationCheckerService', false],
            'security.csrf.token_manager' => ['services', 'security.csrf.token_manager', 'getSecurity_Csrf_TokenManagerService', true],
            'security.firewall.event_dispatcher_locator' => ['privates', 'security.firewall.event_dispatcher_locator', 'getSecurity_Firewall_EventDispatcherLocatorService', true],
            'security.firewall.map' => ['privates', 'security.firewall.map', 'getSecurity_Firewall_MapService', false],
            'security.token_storage' => ['services', 'security.token_storage', 'getSecurity_TokenStorageService', false],
            'security.user_checker_locator' => ['privates', 'security.user_checker_locator', 'getSecurity_UserCheckerLocatorService', true],
        ], [
            'request_stack' => '?',
            'security.authenticator.managers_locator' => '?',
            'security.authorization_checker' => '?',
            'security.csrf.token_manager' => '?',
            'security.firewall.event_dispatcher_locator' => '?',
            'security.firewall.map' => '?',
            'security.token_storage' => '?',
            'security.user_checker_locator' => '?',
        ]), ['admin' => new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.authenticator.form_login.admin' => ['privates', 'security.authenticator.form_login.admin', 'getSecurity_Authenticator_FormLogin_AdminService', true],
            'security.authenticator.remember_me.admin' => ['privates', 'security.authenticator.remember_me.admin', 'getSecurity_Authenticator_RememberMe_AdminService', true],
        ], [
            'security.authenticator.form_login.admin' => '?',
            'security.authenticator.remember_me.admin' => '?',
        ]), 'new_api_admin_user' => new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.authenticator.json_login.new_api_admin_user' => ['privates', 'security.authenticator.json_login.new_api_admin_user', 'getSecurity_Authenticator_JsonLogin_NewApiAdminUserService', true],
            'security.authenticator.jwt.new_api_admin_user' => ['privates', 'security.authenticator.jwt.new_api_admin_user', 'getSecurity_Authenticator_Jwt_NewApiAdminUserService', true],
        ], [
            'security.authenticator.json_login.new_api_admin_user' => '?',
            'security.authenticator.jwt.new_api_admin_user' => '?',
        ]), 'new_api_shop_user' => new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.authenticator.json_login.new_api_shop_user' => ['privates', 'security.authenticator.json_login.new_api_shop_user', 'getSecurity_Authenticator_JsonLogin_NewApiShopUserService', true],
            'security.authenticator.jwt.new_api_shop_user' => ['privates', 'security.authenticator.jwt.new_api_shop_user', 'getSecurity_Authenticator_Jwt_NewApiShopUserService', true],
        ], [
            'security.authenticator.json_login.new_api_shop_user' => '?',
            'security.authenticator.jwt.new_api_shop_user' => '?',
        ]), 'shop' => new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.authenticator.form_login.shop' => ['privates', 'security.authenticator.form_login.shop', 'getSecurity_Authenticator_FormLogin_ShopService', true],
            'security.authenticator.remember_me.shop' => ['privates', 'security.authenticator.remember_me.shop', 'getSecurity_Authenticator_RememberMe_ShopService', true],
        ], [
            'security.authenticator.form_login.shop' => '?',
            'security.authenticator.remember_me.shop' => '?',
        ]), 'image_resolver' => NULL, 'dev' => NULL]), 'https://paypal.sylius.com'), $a, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['Sylius\\PayPalPlugin\\Provider\\PayPalPaymentMethodProviderInterface'] ?? $container->load('getPayPalPaymentMethodProviderInterfaceService')));
    }
}
